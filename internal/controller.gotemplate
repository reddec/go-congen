// Code generated by go-congen DO NOT EDIT.
package {{.Package}}

import (
    "strconv"
    "net/http"
    "fmt"
    "log"
    "html/template"
    "errors"
    _ "embed"
)

//go:embed {{.Input}}
var templateContent string


type Controller interface {
ViewData(request *http.Request, lastError error) (interface{}, error)
{{- range .Forms}}
    Do{{.Name}}(writer http.ResponseWriter, request *http.Request, params {{.Name}}Params) error
{{- end}}
}



func Wrap(controller Controller) http.Handler {
    t := template.Must(template.New("").Parse(templateContent))
    w := &wrapper{template:t, controller: controller}
    mux := http.NewServeMux()
    {{- range .Paths}}
    mux.HandleFunc("/{{.Name}}" , func(writer http.ResponseWriter, request *http.Request) {
        switch request.Method {
            {{- if eq .Name ""}}
            case http.MethodGet:
                w.mainView(writer, request, nil)
            {{- else if .Get}}
            case http.MethodGet:
                w.handle{{.Get.Name}}(writer, request)
            {{- end}}
            {{- if .Post}}
            case http.MethodPost:
                w.handle{{.Post.Name}}(writer, request)
            {{- end}}
            default:
                writer.WriteHeader(http.StatusMethodNotAllowed)
        }
    })
    {{- end}}
    return mux
}


{{- range .Forms}}
    type {{.Name}}Params struct {
    {{- range .Fields}}
        {{.Name}} {{.Type}}
    {{- end}}
    }

    func (params *{{.Name}}Params) Parse(request *http.Request) error {
    {{- range .Fields}}
        {{- if .IsString}}
            params.{{.Name}} = request.FormValue("{{.Label}}")
        {{- else if .IsBool}}
                params.{{.Name}} = request.FormValue("{{.Label}}") == "on"
        {{- else if .IsFloat}}
            if v,err:=strconv.ParseFloat(request.FormValue("{{.Label}}"), 64); err != nil {
                return fmt.Errorf("parse {{.Label}}: %w", err)
            } else {
                params.{{.Name}} = v
            }
        {{- else if .IsInteger}}
            if v,err:=strconv.ParseInt(request.FormValue("{{.Label}}"), 10, 64); err != nil {
                return fmt.Errorf("parse {{.Label}}: %w", err)
            } else {
                params.{{.Name}} = v
            }
        {{- end}}
    {{- end}}
    return nil
    }
{{- end}}

type wrappedResponse struct {
	headersSent bool
	real        http.ResponseWriter
}

func (wr *wrappedResponse) Header() http.Header {
	return wr.real.Header()
}

func (wr *wrappedResponse) Write(bytes []byte) (int, error) {
	wr.headersSent = true
	return wr.real.Write(bytes)
}

func (wr *wrappedResponse) WriteHeader(statusCode int) {
	wr.headersSent = true
	wr.real.WriteHeader(statusCode)
}

type wrapper struct {
    template   *template.Template
    controller Controller
}

func (wrp *wrapper) mainView(writer http.ResponseWriter, request *http.Request, lastError error) {
    data, err := wrp.controller.ViewData(request, lastError)
    if err != nil {
        log.Println("failed get view data:", err)
        http.Error(writer, err.Error(), http.StatusInternalServerError)
        return
    }
    writer.Header().Set("Content-Type", "text/html")
    err = wrp.template.Execute(writer, data)
    if err != nil {
        log.Println("failed to render:", err)
    }
}

{{- range .Forms}}
func (wrp *wrapper) handle{{.Name}}(writer http.ResponseWriter, request *http.Request) {
    var params {{.Name}}Params
    err := params.Parse(request)
    if err != nil {
        log.Println("failed paras {{.Name}} params:", err)
        writer.WriteHeader(http.StatusBadRequest)
        wrp.mainView(writer, request, err)
        return
    }

    wr := &wrappedResponse{real: writer}
    err = wrp.controller.Do{{.Name}}(wr, request, params)
    if err != nil {
        log.Println("failed process {{.Name}}:", err)
        writer.WriteHeader(http.StatusUnprocessableEntity)
        wrp.mainView(writer, request, err)
        return
    }
    if !wr.headersSent {
        writer.Header().Set("Location", ".")
        writer.WriteHeader(http.StatusSeeOther)
    }
}
{{- end}}